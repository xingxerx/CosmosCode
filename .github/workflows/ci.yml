name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run unit tests
        run: npm test
      - name: Run integration tests
        run: npm run test:integration
      - name: Generate coverage report
        run: npm run test:coverage
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
      - name: Cache test results
        uses: actions/cache@v3
        with:
          path: coverage
          key: ${{ runner.os }}-coverage-${{ github.sha }}
        
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npx eslint .
  
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run npm audit
        run: npm audit --production
      - name: Run Snyk scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'CosmosCode'
          path: '.'
          format: 'HTML'
          out: 'reports'
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: reports/
      
  build:
    needs: [test, lint, security]
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_outputs.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Set image tag
        id: set_outputs
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "image_tag=cosmoscode:${{ github.sha }}-prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "image_tag=cosmoscode:${{ github.sha }}-dev" >> $GITHUB_OUTPUT
          else
            echo "image_tag=cosmoscode:${{ github.sha }}-test" >> $GITHUB_OUTPUT
          fi
      - name: Build Docker image
        run: docker build -t ${{ steps.set_outputs.outputs.image_tag }} .
      - name: Run container tests
        run: docker run ${{ steps.set_outputs.outputs.image_tag }} npm test
      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.set_outputs.outputs.image_tag }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
      - name: Tag Docker image for latest
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            docker tag ${{ steps.set_outputs.outputs.image_tag }} cosmoscode:latest
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            docker tag ${{ steps.set_outputs.outputs.image_tag }} cosmoscode:develop
          fi
      - name: Set up Docker Buildx
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push Docker image
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: |
          docker push ${{ steps.set_outputs.outputs.image_tag }}
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            docker push cosmoscode:latest
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            docker push cosmoscode:develop
          fi
      
  deploy-staging:
    needs: [build]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install Python dependencies
        run: pip install -r requirements.txt
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Deploy to ECS Staging
        run: |
          aws ecs update-service --cluster cosmoscode-staging-cluster --service cosmoscode-staging-service --force-new-deployment
      - name: Verify deployment
        run: |
          echo "Verifying staging deployment..."
          sleep 30
          aws ecs describe-services --cluster cosmoscode-staging-cluster --services cosmoscode-staging-service
      - name: Notify on success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_TITLE: Staging Deployment Successful
          SLACK_MESSAGE: 'CosmosCode has been deployed to staging successfully!'
      
  deploy-production:
    needs: [build]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install Python dependencies
        run: pip install -r requirements.txt
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Deploy to ECS Production
        run: |
          aws ecs update-service --cluster cosmoscode-cluster --service cosmoscode-service --force-new-deployment
      - name: Verify deployment
        run: |
          echo "Verifying production deployment..."
          sleep 30
          aws ecs describe-services --cluster cosmoscode-cluster --services cosmoscode-service
      - name: Notify on success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_TITLE: Production Deployment Successful
          SLACK_MESSAGE: 'CosmosCode has been deployed to production successfully!'
      - name: Notify on failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: danger
          SLACK_TITLE: Production Deployment Failed
          SLACK_MESSAGE: 'CosmosCode deployment to production failed!'
